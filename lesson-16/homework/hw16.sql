WITH RECURSIVE numbers AS (SELECT 1 AS num UNION ALL SELECT num + 1 FROM numbers WHERE num < 1000) SELECT * FROM numbers;
SELECT e.id, e.name, s.total_sales FROM employees e JOIN (SELECT employee_id, SUM(amount) AS total_sales FROM sales GROUP BY employee_id) s ON e.id = s.employee_id;
WITH avg_salary_cte AS (SELECT AVG(salary) AS avg_salar FROM employees)SELECT * FROM avg_salary_cte;
SELECT p.id, p.product_name, s.max_sale FROM products p JOIN (SELECT product_id, MAX(amount) AS max_sale FROM sales GROUP BY product_id) s ON p.id = s.product_id;
WITH RECURSIVE doubles AS (SELECT 1 AS value UNION ALL SELECT value * 2 FROM doubles WHERE value * 2 < 1000000) SELECT * FROM doubles;
WITH sales_count AS (SELECT employee_id, COUNT(*) AS total_sales FROM sales GROUP BY employee_id) SELECT e.name FROM employees e JOIN sales_count sc ON e.id = sc.employee_id WHERE sc.total_sales > 5;
WITH product_sales AS (SELECT product_id, SUM(amount) AS total_sales FROM sales GROUP BY product_id) SELECT p.* FROM products p JOIN product_sales ps ON p.id = ps.product_id WHERE ps.total_sales > 500;
WITH avg_salary AS (SELECT AVG(salary) AS avg_sal FROM employees) SELECT e.* FROM employees e, avg_salary a WHERE e.salary > a.avg_sal;
SELECT e.id, e.name, dt.order_count FROM employees e JOIN (SELECT employee_id, COUNT(*) AS order_count FROM sales GROUP BY employee_id) dt ON e.id = dt.employee_id ORDER BY dt.order_count DESC LIMIT 5;
SELECT p.category_id, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.id = s.product_id GROUP BY p.category_id;
WITH RECURSIVE factorial(n, fact) AS (SELECT 1, 1 UNION ALL SELECT n+1, fact*(n+1) FROM factorial WHERE n < 10) SELECT n, fact FROM factorial;
WITH RECURSIVE split_chars(str, pos, ch) AS (SELECT 'example', 1, SUBSTRING('example',1,1) UNION ALL SELECT str, pos+1, SUBSTRING(str, pos+1,1) FROM split_chars WHERE pos < LENGTH(str)) SELECT ch FROM split_chars;
WITH sales_cte AS (SELECT DATE_TRUNC('month', sale_date) AS month, SUM(amount) AS total_sales FROM sales GROUP BY month), sales_diff AS (SELECT month, total_sales, LAG(total_sales) OVER (ORDER BY month) AS prev_month_sales FROM sales_cte) SELECT month, total_sales, total_sales - COALESCE(prev_month_sales,0) AS sales_diff FROM sales_diff;
SELECT e.id, e.name, dt.total_sales, dt.quarter FROM employees e JOIN (SELECT employee_id, SUM(amount) AS total_sales, EXTRACT(QUARTER FROM sale_date) AS quarter FROM sales GROUP BY employee_id, quarter) dt ON e.id = dt.employee_id WHERE dt.total_sales > 45000;
WITH RECURSIVE Fibonacci(n, fib) AS (SELECT 1, 0 UNION ALL SELECT 2, 1 UNION ALL SELECT n+1, fib + LAG(fib) OVER (ORDER BY n) FROM Fibonacci WHERE n < 20) SELECT n, fib FROM Fibonacci;
SELECT * FROM FindSameCharacters WHERE Vals IS NOT NULL AND LENGTH(Vals) > 1 AND Vals NOT LIKE '%[^' || SUBSTRING(Vals,1,1) || ']%';
SELECT * FROM FindSameCharacters WHERE Vals IS NOT NULL AND LEN(Vals) > 1 AND REPLACE(Vals, SUBSTRING(Vals,1,1), '') = '';
WITH RECURSIVE Numbers AS (SELECT 1 AS n, CAST('1' AS VARCHAR(100)) AS seq UNION ALL SELECT n+1, seq || CAST(n+1 AS VARCHAR) FROM Numbers WHERE n < 5) SELECT * FROM Numbers;
SELECT e.EmployeeID, e.FirstName, e.LastName, dt.total_sales FROM Employees e JOIN (SELECT EmployeeID, SUM(SalesAmount) AS total_sales FROM Sales WHERE SaleDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY EmployeeID) dt ON e.EmployeeID = dt.EmployeeID WHERE dt.total_sales = (SELECT MAX(total_sales) FROM (SELECT EmployeeID, SUM(SalesAmount) AS total_sales FROM Sales WHERE SaleDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY EmployeeID) AS sub);
WITH CTE AS (SELECT PawanName, Pawan_slug_name, STRING_AGG(DISTINCT value, '') WITHIN GROUP (ORDER BY value) AS Cleaned FROM RemoveDuplicateIntsFromNames CROSS APPLY STRING_SPLIT(Pawan_slug_name, '') WHERE value LIKE '[0-9]' GROUP BY PawanName, Pawan_slug_name) SELECT PawanName, CASE WHEN LEN(Cleaned) > 1 THEN Cleaned ELSE '' END AS CleanedString FROM CTE;
